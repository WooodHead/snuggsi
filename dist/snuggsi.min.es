const HTMLLinkElement=function(tag){const proxy={},link=document.querySelector("link#"+tag+"[rel\x3dimport], link[href*\x3d"+tag+"][rel\x3dimport]"),register=(handler)=>HTMLImports.useNative?link.onload=handler:HTMLImports.whenReady((_)=>handler({target:link}));Object.defineProperties(proxy,{"onload":{set(handler){!!!link?handler({target:proxy}):register(handler)}},"onerror":{set(handler){}}});return proxy};
class TokenList{constructor(node){const textify=(node)=>(node.text=node.textContent)&&node,tokenize=(token)=>token.textContent.match(/{(\w+|#)}/g).map(symbolize).map(insert(token)),symbolize=(symbol)=>symbol.match(/(\w+|#)/g)[0],insert=(token)=>(symbol)=>(this[symbol]=this[symbol]||[])&&this[symbol].push(token);this.sift(node).map(textify).map(tokenize)}sift(node){const nodes=[],visit=(node)=>node.nodeType===Node.TEXT_NODE?TEXT_NODE(node)&&NodeFilter.FILTER_ACCEPT:ELEMENT_NODE(node.attributes)&&NodeFilter.FILTER_REJECT,
TEXT_NODE=(node)=>node.nodeType===Node.TEXT_NODE&&/{(\w+|#)}/.test(node.textContent),ELEMENT_NODE=(attributes)=>Array.from(attributes||[]).filter((attr)=>/{(\w+|#)}/g.test(attr.value)).map((attribute)=>nodes.push(attribute)),walker=document.createNodeIterator(node,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT,visit);while(node=walker.nextNode())nodes.push(node);return nodes}bind(context,node){const prepare=(symbol)=>this[symbol].map((token)=>token.textContent=token.text)&&symbol,replace=(symbol)=>
this[symbol].map(replacement(symbol)),replacement=(symbol)=>(item)=>item.textContent=item.textContent.replace("{"+symbol+"}",context[symbol]);Object.keys(this).filter((key)=>context[key]).map(prepare).map(replace);return this}}
const Template=function(name){return Object.assign(document.querySelector("template[name\x3d"+name+"]"),{bind});function bind(context){this.dependents=this.dependents||[];context=Array.isArray(context)?context:[context];let dependent=undefined;const records=[];while(dependent=this.dependents.pop())dependent.remove();context.forEach((item,index)=>{let clone=this.cloneNode(true),tokens=new TokenList(clone.content);item=typeof item==="object"?item:{self:item};item["#"]=index;tokens.bind(item);records.push(clone)});
records.map(function(record){this.dependents.push(...record.content.childNodes)},this);let fragment=document.createElement("template");let a=records.map((record)=>record.innerHTML).join("");document.querySelector("menu").innerHTML=a;return this}};const EventTarget=(Element)=>class extends Element{connectedCallback(){(new HTMLLinkElement(this.tagName.toLowerCase())).onload=this.onimport.bind(this)}listen(event,listener=this[event]){this.addEventListener(event,listener)}};
const ParentNode=(Element)=>class extends Element{selectAll(selector){return this.querySelectorAll(selector)}select(selector){return this.selectAll(selector)[0]}get tokens(){return this._tokens=this._tokens||new TokenList(this)}};
const GlobalEventHandlers=(Element)=>class extends Element{register(events=(event)=>/^on/.exec(event)){const mirror=(handler)=>this[handler]===null&&(this[handler]=Element[handler].bind(this));Object.getOwnPropertyNames(Element).filter(events).map(mirror);const nodes=":not(script):not(template):not(style):not(link)",children=Array.from(this.querySelectorAll(nodes)),registered=(node)=>Array.from(node.attributes).map((attr)=>attr.name).filter(events).length>0,reflect=(node)=>Array.from(node.attributes).map((attr)=>
attr.name).filter(events).map(reflection(node)),reflection=(node)=>(event)=>node[event]=handle(node[event]),handle=(handler,[_,event]=/{\s*(\w+)\s*}/.exec(handler)||[])=>event&&Element[event]&&Element[event].bind(this)||handler||null;void[this].concat(children).filter(registered).map(reflect)}};
const Component=(Element)=>class extends EventTarget(ParentNode(GlobalEventHandlers(Element))){constructor(){super();this.context={};this.initialize&&this.initialize()}render(){this.tokens.bind(this);Array.from(this.selectAll("template[name]")).map((template)=>new Template(template.getAttribute("name"))).map((template)=>template.bind(this[template.attributes.name.value]));this.register();this.constructor.onidle&&this.constructor.onidle.call(this)}onimport(event){const document=event.target.import,
template=document&&document.querySelector("template");template&&this.clone(template);this.constructor.onconnect&&this.constructor.onconnect.call(this);this.render()}clone(template){const fragment=template.content.cloneNode(true),slots=Array.from(fragment.querySelectorAll("slot")),replacements=Array.from(this.querySelectorAll("[slot]")),register=(attribute)=>this.setAttribute(attribute.name,attribute.value),replace=(replacement)=>slots.filter(match(replacement)).map(exchange(replacement)),match=(replacement)=>
(slot)=>replacement.getAttribute("slot")===slot.getAttribute("name"),exchange=(replacement)=>(slot)=>slot.parentNode.replaceChild(replacement,slot);Array.from(template.attributes).map(register);replacements.map(replace);this.innerHTML="";this.append(fragment)}};const ElementPrototype=window.Element.prototype;const Element=function(tag,CustomElementRegistry=window.customElements){return function(Element){CustomElementRegistry.define(...tag,Component(Element))}};Element.prototype=ElementPrototype;
