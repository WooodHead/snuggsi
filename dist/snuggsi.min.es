const HTMLLinkElement=function(tag){const proxy={},link=document.querySelector("link#"+tag+"[rel\x3dimport], link[href*\x3d"+tag+"][rel\x3dimport]"),register=(event,handler)=>HTMLImports&&!!!HTMLImports.useNative?HTMLImports.whenReady((_)=>handler({target:link})):link.addEventListener(event,handler);Object.defineProperties(proxy,{"addEventListener":{writable:false,value:function(event,handler){!!!link?handler({target:proxy}):register(event,handler)}}});return proxy};
class TokenList{constructor(node){this.sift(node).map(this.tokenize,this)}tokenize(node){const insert=(node)=>(symbol)=>(this[symbol]=this[symbol]||[]).push(node);void(node.text=node.textContent).match(/([^{]*?)\w(?=\})/g).map(insert(node))}sift(node){const nodes=[],expression=/{(\w+|#)}/,visit=(node)=>node.nodeType===Node.TEXT_NODE?TEXT_NODE(node):ELEMENT_NODE(node.attributes)&&NodeFilter.FILTER_REJECT,TEXT_NODE=(node)=>expression.test(node.textContent)&&nodes.push(node),ELEMENT_NODE=(attrs)=>Array.from(attrs).map((attr)=>
expression.test(attr.value)&&nodes.push(attr)),walker=document.createNodeIterator(node,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT,visit);while(walker.nextNode())0;return nodes}bind(context){const keys=Object.keys(this),reset=(symbol)=>this[symbol].map((node)=>(node.textContent=node.text)&&symbol),replace=(symbol,token="{"+symbol+"}")=>(item)=>item.textContent=item.textContent.replace(token,context[symbol]||token);keys.map(reset);for(let symbol in this)this[symbol].map(replace(symbol))}}
const HTMLTemplateElement=Template=function(name){return Object.assign(document.querySelector("template[name\x3d"+name+"]"),{bind});function bind(context){contexts=[].concat(...[context]);let clone,template=this.cloneNode(false);template.innerHTML=contexts.map((context)=>context).map((context,index)=>{context=typeof context==="object"?context:{self:context};context["#"]=index;clone=this.cloneNode(true);void(new TokenList(clone.content)).bind(context);return clone.innerHTML}).join("");void(this.dependents||
[]).map((dependent)=>dependent.remove());this.dependents=Array.from(template.content.childNodes);this.after(template.content);return this}};const EventTarget=(Element)=>class extends Element{on(event,handler){this.addEventListener(event,this.renderable(handler))}renderable(handler){return(event,render=true)=>(event.prevent=(_)=>(render=false)&&event.preventDefault())&&handler.call(this,event)!==false&&render&&this.render()}};const ParentNode=(Element)=>class extends Element{selectAll(selector){return this.querySelectorAll(selector)}select(selector){return this.selectAll(selector)[0]}};
const GlobalEventHandlers=(Element)=>class extends Element{onconnect(event,document){(document=event.target.import)&&this.parse(document.querySelector("template"));super.onconnect&&super.onconnect();this.render()}introspect(handler,name){(name=(handler.match(/^on(.+)$/)||[])[1])&&Object.keys(HTMLElement.prototype).includes(handler)&&this.on(name,this[handler])}reflect(node){const register=(event,handler)=>(handler=/{\s*(\w+)\s*}/.exec(node[event]))&&(handler=this[(handler||[])[1]])&&(node[event]=
this.renderable(handler));Array.from(node.attributes).map((attr)=>attr.name).filter((name)=>/^on/.test(name)).map(register)}};
const Component=(Element)=>class extends EventTarget(ParentNode(GlobalEventHandlers(Element))){constructor(){super();this.context={};this.tokens=new TokenList(this);Object.getOwnPropertyNames(Element.prototype).map(this.introspect,this);this.initialize&&this.initialize()}connectedCallback(){HTMLLinkElement(this.tagName.toLowerCase()).addEventListener("load",this.onconnect.bind(this))}render(){this.tokens.bind(this);Array.from(this.selectAll("template[name]")).map((template)=>template.getAttribute("name")).map((name)=>
(new Template(name)).bind(this[name]));Array.from(this.selectAll("*")).concat([this]).map(this.reflect,this);super.onidle&&super.onidle()}parse(template,insert){template=template.cloneNode(true);insert=(replacement,name,slot)=>(name=replacement.getAttribute("slot"))&&(slot=template.content.querySelector("slot[name\x3d"+name+"]")).parentNode.replaceChild(replacement,slot);for(let node of this.selectAll("[slot]"))insert(node);Array.from(template.attributes).map((attr)=>this.setAttribute(attr.name,attr.value));
this.innerHTML=template.innerHTML}};const ElementPrototype=window.Element.prototype;const Element=(tag,CustomElementRegistry=window.customElements)=>(Element)=>CustomElementRegistry.define(...tag,Component(Element));Element.prototype=ElementPrototype;
