const HTMLLinkElement=function(tag){console.log(tag);const link=document.querySelector("link#"+tag+"[rel\x3dimport], link[href*\x3d"+tag+"][rel\x3dimport]")||{};Object.defineProperty(link,"onload",{set(handler){!!!HTMLImports.useNative?HTMLImports.whenReady((_)=>handler({target:link})):handler({target:link})}});return link};
class TokenList{constructor(node){const textify=(node)=>(node.text=node.textContent,node),tokenize=(token)=>token.textContent.match(/{(\w+|#)}/g).map(symbolize).map(insert(token)),symbolize=(symbol)=>symbol.match(/(\w+|#)/g)[0],insert=(token)=>(symbol)=>(this[symbol]=this[symbol]||[])&&this[symbol].push(token);this.sift(node).map(textify).map(tokenize)}sift(node){const nodes=[],visit=(node)=>node.nodeType===Node.TEXT_NODE?TEXT_NODE(node)&&NodeFilter.FILTER_ACCEPT:ELEMENT_NODE(node.attributes)&&NodeFilter.FILTER_REJECT,
TEXT_NODE=(node)=>node.nodeType===Node.TEXT_NODE&&/{(\w+|#)}/.test(node.textContent),ELEMENT_NODE=(attributes)=>Array.from(attributes||[]).filter((attr)=>/{(\w+|#)}/g.test(attr.value)).map((attribute)=>nodes.push(attribute)),walker=document.createNodeIterator(node,NodeFilter.SHOW_ELEMENT|NodeFilter.SHOW_TEXT,visit);while(node=walker.nextNode())nodes.push(node);return nodes}bind(context,node){const prepare=(symbol)=>this[symbol].map((token)=>token.textContent=token.text)&&symbol,replace=(symbol)=>
this[symbol].map(replacement(symbol)),replacement=(symbol)=>(item)=>item.textContent=item.textContent.replace("{"+symbol+"}",context[symbol]);Object.keys(this).map(prepare).map(replace);return this}}
const Template=function(name){return Object.assign(document.querySelector("template[name\x3d"+name+"]"),{bind});function bind(context){this.dependents=this.dependents||[];context=Array.isArray(context)?context:[context];let dependent=undefined;const records=[];while(dependent=this.dependents.pop())dependent.remove();context.forEach((item,index)=>{let clone=this.cloneNode(true),tokens=new TokenList(clone.content);item=typeof item==="object"?item:{self:item};item["#"]=index;tokens.bind(item);records.push(clone.content)});
records.map(function(record){this.dependents.push(...record.childNodes)},this);this.after(...records);return this}};const EventTarget=(Element)=>class extends Element{listen(event,listener=this[event]){this.addEventListener(event,listener)}};const ParentNode=(Element)=>class extends Element{selectAll(selector){return this.querySelectorAll(selector)}select(selector){return this.selectAll(selector)[0]}get tokens(){return this._tokens=this._tokens||new TokenList(this)}};
const GlobalEventHandlers=(Element)=>class extends Element{register(events=(event)=>/^on/.exec(event)){const nodes=":not(script):not(template):not(style):not(link)",children=Array.from(this.querySelectorAll(nodes)),registered=(node)=>Array.from(node.attributes).map((attr)=>attr.name).filter(events).length>0,handle=(event,handler=(/{\s*(\w+)\s*}/.exec(event)||[])[1])=>handler&&Element[handler].bind(this)||event||null,reflect=(self)=>(node)=>Array.from(node.attributes).map((attr)=>attr.name).filter(events).filter((name)=>
this[name]!==undefined).map(reflection(node)),reflection=(node)=>(event)=>{node[event]=handle(node[event])},mirror=(handler)=>!!!this[handler]==undefined&&(this[handler]=Element[handler].bind(this));void[this].concat(children).filter(registered).map(reflect(this));Object.getOwnPropertyNames(Element).filter(events).map(mirror);return this}};
const Component=(Element)=>class extends EventTarget(ParentNode(GlobalEventHandlers(Element))){constructor(){super();this.context={};this.initialize&&this.initialize()}render(){console.log("rendering",this);this.tokens.bind(this);void function(templates){const bind=(template)=>{const name=template.getAttribute("name");void(new Template(name)).bind(this[name])};templates.map(bind)}.call(this,Array.from(this.selectAll("template[name]")));this.register();this.constructor.onready&&this.constructor.onready.call(this)}connectedCallback(){const link=
new HTMLLinkElement(this.tagName.toLowerCase());link.onload=this.clone.bind(this)}clone(event){console.log("cloning",event.target);console.log("wat",this,event.target);const d=event.target.import,template=d&&d.children[0];console.log("document",this,template);this.render()}};const ElementPrototype=window.Element.prototype;const Element=function(tag,CustomElementRegistry=window.customElements){tag=tag[0];return function(Element){CustomElementRegistry.define(tag,Component(Element))}};
Element.prototype=ElementPrototype;
